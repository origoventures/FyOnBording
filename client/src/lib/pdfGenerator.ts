import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { SeoData, TagStatus } from '@shared/schema';
import { formatDate, getTagStatusText } from './utils';

// Helper function to get color for status
const getStatusColor = (status: TagStatus): string => {
  switch (status) {
    case 'good':
      return '#4CAF50';
    case 'warning':
      return '#FFC107';
    case 'error':
      return '#F44336';
    default:
      return '#9E9E9E';
  }
};

export const generatePdf = async (url: string, seoData: SeoData): Promise<void> => {
  // Create PDF document
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
  });

  // PDF dimensions
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const margin = 20;
  const usableWidth = pageWidth - (margin * 2);
  const footerY = pageHeight - 10; // Posizione Y del footer

  // Colors
  const primaryColor = '#03071C';
  const accentColor = '#d1f96d';
  const textColor = '#333333';
  const lightBg = '#f9fef0';

  // Fonts
  const titleFont = 'helvetica';
  const bodyFont = 'helvetica';

  // Helper function to add text
  const addText = (text: string, x: number, y: number, options: {
    fontSize?: number;
    font?: string;
    align?: 'left' | 'center' | 'right';
    color?: string;
    bold?: boolean;
  } = {}) => {
    const {
      fontSize = 12,
      font = bodyFont,
      align = 'left',
      color = textColor,
      bold = false,
    } = options;

    doc.setFont(font, bold ? 'bold' : 'normal');
    doc.setFontSize(fontSize);
    doc.setTextColor(color);

    if (align === 'center') {
      doc.text(text, pageWidth / 2, y, { align: 'center' });
    } else if (align === 'right') {
      doc.text(text, pageWidth - margin, y, { align: 'right' });
    } else {
      doc.text(text, x, y);
    }
  };

  // Helper function to add a horizontal line
  const addLine = (y: number, width = usableWidth) => {
    doc.setDrawColor(200, 200, 200);
    doc.setLineWidth(0.5);
    doc.line(margin, y, margin + width, y);
  };

  // Helper for creating section headers
  const addSectionHeader = (text: string, y: number) => {
    doc.setFillColor(lightBg);
    doc.rect(margin, y - 6, usableWidth, 10, 'F');
    addText(text, margin + 2, y, { bold: true, fontSize: 14, color: primaryColor });
    return y + 10;
  };

  // Helper to create status indicator
  const addStatusIndicator = (status: TagStatus, text: string, y: number) => {
    const statusColor = getStatusColor(status);
    const statusText = getTagStatusText(status);

    // Draw status circle
    doc.setFillColor(statusColor);
    doc.circle(margin + 3, y - 1, 3, 'F');

    // Add status text
    addText(text, margin + 10, y, { fontSize: 11 });
    addText(statusText, margin + usableWidth - 25, y, { 
      fontSize: 9, 
      align: 'right',
      color: statusColor,
      bold: true 
    });

    return y + 6;
  };

  // ----- TITLE PAGE -----

  // Background rectangle for header
  doc.setFillColor(lightBg);
  doc.rect(0, 0, pageWidth, 50, 'F');

  // Add title
  addText('SEO Analysis Report', pageWidth / 2, 30, { 
    fontSize: 24, 
    align: 'center',
    color: primaryColor,
    bold: true 
  });

  // Add SEO Meta Muse logo (commentato per evitare errori se il logo non esiste)
  // Nota: l'immagine del logo Ã¨ stata temporaneamente disabilitata 
  // const logoPath = 'client/src/assets/fylle-logo.png';
  // doc.addImage(logoPath, 'PNG', pageWidth/2 - 25, 20, 50, 15);

  // Add subtitle
  addText('Generated by SEO Meta Muse', pageWidth / 2, 45, { 
    fontSize: 16, 
    align: 'center',
    color: primaryColor 
  });

  // Add website URL
  addText('Website URL:', margin, 70, { bold: true, fontSize: 14 });
  addText(url, margin, 78, { fontSize: 12 });

  // Add date
  addText('Analysis Date:', margin, 90, { bold: true, fontSize: 14 });
  addText(formatDate(new Date()), margin, 98, { fontSize: 12 });

  // Add score
  doc.setFillColor(lightBg);
  doc.rect(margin, 110, usableWidth, 40, 'F');

  addText('SEO Score', pageWidth / 2, 125, { 
    align: 'center', 
    fontSize: 18,
    color: primaryColor,
    bold: true 
  });

  addText(`${seoData.score}`, pageWidth / 2, 140, { 
    align: 'center',  
    fontSize: 30,
    color: seoData.score > 80 ? '#4CAF50' : seoData.score > 50 ? '#FFC107' : '#F44336',
    bold: true
  });

  // Add tag counts
  const { good, warning, error } = seoData.tagCounts;
  const totalTags = good + warning + error;

  doc.setFillColor(lightBg);
  doc.rect(margin, 160, usableWidth, 30, 'F');

  addText('Overview', pageWidth / 2, 170, { 
    align: 'center', 
    fontSize: 14,
    color: primaryColor,
    bold: true 
  });

  const tagWidth = usableWidth / 3;

  // Good tags
  doc.setFillColor('#4CAF50');
  doc.circle(margin + (tagWidth/2) - 15, 180, 3, 'F');
  addText(`${good} Good`, margin + (tagWidth/2) - 10, 180, { 
    fontSize: 12,
    color: '#4CAF50'
  });

  // Warning tags
  doc.setFillColor('#FFC107');
  doc.circle(margin + (tagWidth) + (tagWidth/2) - 15, 180, 3, 'F');
  addText(`${warning} Warnings`, margin + (tagWidth) + (tagWidth/2) - 10, 180, { 
    fontSize: 12, 
    color: '#FFC107'
  });

  // Error tags
  doc.setFillColor('#F44336');
  doc.circle(margin + (tagWidth*2) + (tagWidth/2) - 15, 180, 3, 'F');
  addText(`${error} Errors`, margin + (tagWidth*2) + (tagWidth/2) - 10, 180, { 
    fontSize: 12,
    color: '#F44336' 
  });

  // Add footer
  addText('SEO Meta Muse Report - powered by Fylle.ai', pageWidth / 2, footerY, { 
    align: 'center', 
    fontSize: 8,
    color: '#999999'
  });

  // ----- INTRODUCTION PAGE -----
  doc.addPage();

  // Add page header
  doc.setFillColor(lightBg);
  doc.rect(0, 0, pageWidth, 15, 'F');
  addText('SEO Analysis Report', pageWidth / 2, 10, { 
    fontSize: 10, 
    align: 'center',
    color: primaryColor
  });

  let yPos = 30;

  // Introduction section
  yPos = addSectionHeader('Introduction', yPos);

  const intro = 
    'This document provides a comprehensive analysis of the SEO meta tags found on your website. ' +
    'Search Engine Optimization (SEO) is crucial for ensuring your content is discoverable by search engines ' +
    'and appears correctly when shared on social media platforms. ' +
    'This report highlights the current status of your meta tags and provides actionable recommendations for improvement.';

  // Split text into multiple lines
  const introLines = doc.splitTextToSize(intro, usableWidth);
  addText(introLines, margin, yPos + 10, { fontSize: 11 });

  yPos += 10 + (introLines.length * 6);

  // What is SEO section
  yPos = addSectionHeader('What is SEO?', yPos + 10);

  const seoExplanation = 
    'Search Engine Optimization (SEO) is the practice of improving your website to increase its visibility in search engines like Google. ' +
    'Meta tags are HTML elements that provide information about a webpage to search engines and website visitors. ' +
    'Key meta tags include title tags, meta descriptions, and various social media tags like Open Graph and Twitter Cards. ' +
    'Properly implemented meta tags help search engines understand your content and can improve click-through rates when your page appears in search results ' +
    'or is shared on social platforms. This leads to increased visibility, traffic, and engagement with your content.';

  const seoLines = doc.splitTextToSize(seoExplanation, usableWidth);
  addText(seoLines, margin, yPos + 10, { fontSize: 11 });

  yPos += 10 + (seoLines.length * 6);

  // Add footer
  addText('SEO Meta Muse Report - powered by Fylle.ai', pageWidth / 2, footerY, { 
    align: 'center', 
    fontSize: 8,
    color: '#999999'
  });

  // ----- ANALYSIS RESULTS PAGE -----
  doc.addPage();

  // Add page header
  doc.setFillColor(lightBg);
  doc.rect(0, 0, pageWidth, 15, 'F');
  addText('SEO Analysis Report', pageWidth / 2, 10, { 
    fontSize: 10, 
    align: 'center',
    color: primaryColor
  });

  yPos = 30;

  // Analysis Results section
  yPos = addSectionHeader('Analysis Results', yPos);
  yPos += 10;

  // Get title and description status
  const titleTag = seoData.tags['title'] || '';
  const descriptionTag = seoData.tags['description'] || '';

  const titleStatus: TagStatus = titleTag.length > 0 
    ? (titleTag.length > 10 && titleTag.length < 60 ? 'good' : 'warning')
    : 'error';

  const descriptionStatus: TagStatus = descriptionTag.length > 0
    ? (descriptionTag.length > 50 && descriptionTag.length < 160 ? 'good' : 'warning')
    : 'error';

  // Meta Tags Analysis
  addText('Core Meta Tags', margin, yPos, { bold: true, fontSize: 14 });
  yPos += 8;

  // Title tag
  addText('Title Tag:', margin, yPos, { bold: true, fontSize: 12 });
  yPos += 6;

  if (titleTag) {
    const titleLines = doc.splitTextToSize(titleTag, usableWidth - 10);
    addText(titleLines, margin + 5, yPos, { fontSize: 10 });
    yPos += titleLines.length * 5;
  } else {
    addText('No title tag found', margin + 5, yPos, { fontSize: 10, color: '#F44336' });
    yPos += 5;
  }

  yPos = addStatusIndicator(titleStatus, 'Title Tag Status', yPos + 5);

  // Description tag
  addText('Meta Description:', margin, yPos + 5, { bold: true, fontSize: 12 });
  yPos += 11;

  if (descriptionTag) {
    const descLines = doc.splitTextToSize(descriptionTag, usableWidth - 10);
    addText(descLines, margin + 5, yPos, { fontSize: 10 });
    yPos += descLines.length * 5;
  } else {
    addText('No meta description found', margin + 5, yPos, { fontSize: 10, color: '#F44336' });
    yPos += 5;
  }

  yPos = addStatusIndicator(descriptionStatus, 'Description Status', yPos + 5);

  // Open Graph Tags
  yPos += 10;
  addText('Open Graph Tags', margin, yPos, { bold: true, fontSize: 14 });
  yPos += 8;

  const ogTags = [
    { name: 'og:title', label: 'OG Title' },
    { name: 'og:description', label: 'OG Description' },
    { name: 'og:image', label: 'OG Image' },
    { name: 'og:url', label: 'OG URL' },
    { name: 'og:type', label: 'OG Type' }
  ];

  ogTags.forEach(tag => {
    const value = seoData.tags[tag.name];
    const status: TagStatus = value ? 'good' : 'error';

    if (value) {
      const valueLines = doc.splitTextToSize(value, usableWidth - 70);
      addText(`${tag.label}: `, margin, yPos, { bold: true, fontSize: 10 });
      addText(valueLines, margin + 35, yPos, { fontSize: 10 });
      yPos += valueLines.length * 5 + 2;
    } else {
      yPos = addStatusIndicator(status, `Missing ${tag.label}`, yPos);
    }
  });

  // Twitter Card Tags
  yPos += 10;
  addText('Twitter Card Tags', margin, yPos, { bold: true, fontSize: 14 });
  yPos += 8;

  const twitterTags = [
    { name: 'twitter:card', label: 'Twitter Card' },
    { name: 'twitter:title', label: 'Twitter Title' },
    { name: 'twitter:description', label: 'Twitter Description' },
    { name: 'twitter:image', label: 'Twitter Image' }
  ];

  twitterTags.forEach(tag => {
    const value = seoData.tags[tag.name];
    const status: TagStatus = value ? 'good' : 'error';

    if (value) {
      const valueLines = doc.splitTextToSize(value, usableWidth - 70);
      addText(`${tag.label}: `, margin, yPos, { bold: true, fontSize: 10 });
      addText(valueLines, margin + 35, yPos, { fontSize: 10 });
      yPos += valueLines.length * 5 + 2;
    } else {
      yPos = addStatusIndicator(status, `Missing ${tag.label}`, yPos);
    }
  });

  // Add footer
  addText('SEO Meta Muse Report - powered by Fylle.ai', pageWidth / 2, footerY, { 
    align: 'center', 
    fontSize: 8,
    color: '#999999'
  });

  // ----- RECOMMENDATIONS PAGE -----
  doc.addPage();

  // Add page header
  doc.setFillColor(lightBg);
  doc.rect(0, 0, pageWidth, 15, 'F');
  addText('SEO Analysis Report', pageWidth / 2, 10, { 
    fontSize: 10, 
    align: 'center',
    color: primaryColor
  });

  yPos = 30;

  // Recommendations section
  yPos = addSectionHeader('Recommendations & Actionable Insights', yPos);
  yPos += 15;

  // Generate recommendations based on the analysis
  const recommendations: {title: string, description: string, priority: 'high' | 'medium' | 'low'}[] = [];

  // Title recommendations
  if (!titleTag) {
    recommendations.push({
      title: 'Add a title tag',
      description: 'Your page is missing a title tag. Add a descriptive title that is 50-60 characters long and includes your main keyword.',
      priority: 'high'
    });
  } else if (titleTag.length < 10) {
    recommendations.push({
      title: 'Improve your title tag',
      description: 'Your title tag is too short. Create a more descriptive title that is 50-60 characters long and includes your main keyword.',
      priority: 'high'
    });
  } else if (titleTag.length > 60) {
    recommendations.push({
      title: 'Shorten your title tag',
      description: 'Your title tag is too long and may be truncated in search results. Keep it under 60 characters while still being descriptive and including your main keyword.',
      priority: 'medium'
    });
  }

  // Description recommendations
  if (!descriptionTag) {
    recommendations.push({
      title: 'Add a meta description',
      description: 'Your page is missing a meta description. Add a compelling description that is 150-160 characters long and includes your main keyword.',
      priority: 'high'
    });
  } else if (descriptionTag.length < 50) {
    recommendations.push({
      title: 'Improve your meta description',
      description: 'Your meta description is too short. Create a more compelling description that is 150-160 characters long and includes your main keyword.',
      priority: 'high'
    });
  } else if (descriptionTag.length > 160) {
    recommendations.push({
      title: 'Shorten your meta description',
      description: 'Your meta description is too long and may be truncated in search results. Keep it under 160 characters while still being compelling and including your main keyword.',
      priority: 'medium'
    });
  }

  // Open Graph recommendations
  const missingOgTags = ogTags.filter(tag => !seoData.tags[tag.name]);
  if (missingOgTags.length > 0) {
    recommendations.push({
      title: 'Add Open Graph tags',
      description: `Your page is missing the following Open Graph tags: ${missingOgTags.map(t => t.name).join(', ')}. These tags improve how your content appears when shared on social media platforms like Facebook and LinkedIn.`,
      priority: 'medium'
    });
  }

  // Twitter Card recommendations
  const missingTwitterTags = twitterTags.filter(tag => !seoData.tags[tag.name]);
  if (missingTwitterTags.length > 0) {
    recommendations.push({
      title: 'Add Twitter Card tags',
      description: `Your page is missing the following Twitter Card tags: ${missingTwitterTags.map(t => t.name).join(', ')}. These tags improve how your content appears when shared on Twitter.`,
      priority: 'medium'
    });
  }

  // If no specific recommendations, add general ones
  if (recommendations.length === 0) {
    recommendations.push({
      title: 'Maintain your excellent SEO practices',
      description: 'Your page has all the essential meta tags properly implemented. Continue to update your content regularly and ensure your meta tags accurately reflect any changes to your content.',
      priority: 'low'
    });
  }

  // Add recommendations to PDF
  recommendations.forEach((rec, i) => {
    // Check if we need a new page
    if (yPos > pageHeight - 80) {
      doc.addPage();

      // Add page header
      doc.setFillColor(lightBg);
      doc.rect(0, 0, pageWidth, 15, 'F');
      addText('SEO Analysis Report', pageWidth / 2, 10, { 
        fontSize: 10, 
        align: 'center',
        color: primaryColor
      });

      yPos = 30;

      addText('Recommendations & Actionable Insights (continued)', margin, yPos, { 
        bold: true, 
        fontSize: 14,
        color: primaryColor
      });

      yPos += 15;
    }

    // Priority indicator
    let priorityColor = '#4CAF50'; // Low - green
    if (rec.priority === 'high') {
      priorityColor = '#F44336'; // High - red
    } else if (rec.priority === 'medium') {
      priorityColor = '#FFC107'; // Medium - amber
    }

    doc.setFillColor(priorityColor);
    doc.rect(margin, yPos - 4, 3, 10, 'F');

    // Recommendation title
    addText(`${i + 1}. ${rec.title}`, margin + 8, yPos, { 
      bold: true, 
      fontSize: 12,
      color: primaryColor
    });

    yPos += 8;

    // Priority text
    addText(`Priority: ${rec.priority.toUpperCase()}`, margin + 12, yPos, { 
      fontSize: 9,
      color: priorityColor,
      bold: true
    });

    yPos += 6;

    // Description
    const descLines = doc.splitTextToSize(rec.description, usableWidth - 12);
    addText(descLines, margin + 12, yPos, { fontSize: 10 });

    yPos += descLines.length * 5 + 10;
  });

  // Final note
  if (yPos < pageHeight - 60) {
    yPos += 10;

    doc.setFillColor(lightBg);
    doc.rect(margin, yPos - 6, usableWidth, 30, 'F');

    addText('Next Steps', margin + usableWidth/2, yPos, { 
      align: 'center',
      bold: true, 
      fontSize: 12,
      color: primaryColor
    });

    yPos += 8;

    const nextSteps = 
      'Implement these recommendations to improve your SEO performance. ' +
      'After making changes, run another analysis to track your progress. ' +
      'Remember that SEO is an ongoing process that requires regular monitoring and adjustments.';

    const nextStepsLines = doc.splitTextToSize(nextSteps, usableWidth - 20);
    addText(nextStepsLines, margin + 10, yPos, { 
      fontSize: 10,
      align: 'center' 
    });
  }

  // Add footer to the last page
  const pageCount = doc.getNumberOfPages();
  addText(`SEO Meta Muse Report - powered by Fylle.ai`, pageWidth / 2, footerY, { 
    align: 'center', 
    fontSize: 8,
    color: '#999999'
  });

  // Save the PDF
  doc.save(`SEOLens_Report_${url.replace(/[^a-zA-Z0-9]/g, '_')}.pdf`);
};